

#include <iostream>
using namespace std;

 class Person{
    private:
      int age;
      string name;
      
    public:
      Person(int a, string n){
          this->age = a;
          this->name = n;
      }
      //copy constructor
      Person(Person& other){
          this->age = other.age;
          this->name = other.name;
      }
      void display(){
          cout<<"age is" << age << "   ";
          cout<<"name is" << name;
      }
      
  };

int main() {
   
 
  
  Person* p = new Person(20, "chathan");// This line dynamically allocates a Person object and p points to it.
 // Person* d = p;//This line makes d point to the same Person object as p. No new Person object is created, and therefore the copy constructor is not invoked. This is still shallow copy
  Person* d = new Person(*p);  // Deep copy: `d` is a new object copied from the object pointed to by `p`
  //or we can do it like Pesron d = *p;
  //d.display();
  d->display();
   
   return 0;
}
